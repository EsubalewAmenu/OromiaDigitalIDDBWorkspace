/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package IdentificationDatabase.service.base;

import IdentificationDatabase.model.BiometricData;
import IdentificationDatabase.model.BiometricDataFingerPrintBlobModel;

import IdentificationDatabase.service.BiometricDataLocalService;

import IdentificationDatabase.service.persistence.AddressLookupPersistence;
import IdentificationDatabase.service.persistence.BiometricDataPersistence;
import IdentificationDatabase.service.persistence.CitizenFingerprintMatcherPersistence;
import IdentificationDatabase.service.persistence.CitizenRemarkPersistence;
import IdentificationDatabase.service.persistence.KebelesPersistence;
import IdentificationDatabase.service.persistence.PrintedHistoryPersistence;
import IdentificationDatabase.service.persistence.RegistrationCitizenPersistence;
import IdentificationDatabase.service.persistence.ServicesPersistence;
import IdentificationDatabase.service.persistence.SettingsPersistence;
import IdentificationDatabase.service.persistence.TransferToOtherCityPersistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the biometric data local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link IdentificationDatabase.service.impl.BiometricDataLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IdentificationDatabase.service.impl.BiometricDataLocalServiceImpl
 * @see IdentificationDatabase.service.BiometricDataLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class BiometricDataLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements BiometricDataLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link IdentificationDatabase.service.BiometricDataLocalServiceUtil} to access the biometric data local service.
	 */

	/**
	 * Adds the biometric data to the database. Also notifies the appropriate model listeners.
	 *
	 * @param biometricData the biometric data
	 * @return the biometric data that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BiometricData addBiometricData(BiometricData biometricData) {
		biometricData.setNew(true);

		return biometricDataPersistence.update(biometricData);
	}

	/**
	 * Creates a new biometric data with the primary key. Does not add the biometric data to the database.
	 *
	 * @param id the primary key for the new biometric data
	 * @return the new biometric data
	 */
	@Override
	public BiometricData createBiometricData(long id) {
		return biometricDataPersistence.create(id);
	}

	/**
	 * Deletes the biometric data with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the biometric data
	 * @return the biometric data that was removed
	 * @throws PortalException if a biometric data with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BiometricData deleteBiometricData(long id) throws PortalException {
		return biometricDataPersistence.remove(id);
	}

	/**
	 * Deletes the biometric data from the database. Also notifies the appropriate model listeners.
	 *
	 * @param biometricData the biometric data
	 * @return the biometric data that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BiometricData deleteBiometricData(BiometricData biometricData) {
		return biometricDataPersistence.remove(biometricData);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BiometricData.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return biometricDataPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link IdentificationDatabase.model.impl.BiometricDataModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return biometricDataPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link IdentificationDatabase.model.impl.BiometricDataModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return biometricDataPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return biometricDataPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return biometricDataPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BiometricData fetchBiometricData(long id) {
		return biometricDataPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the biometric data with the primary key.
	 *
	 * @param id the primary key of the biometric data
	 * @return the biometric data
	 * @throws PortalException if a biometric data with the primary key could not be found
	 */
	@Override
	public BiometricData getBiometricData(long id) throws PortalException {
		return biometricDataPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(biometricDataLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BiometricData.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(biometricDataLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(BiometricData.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(biometricDataLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BiometricData.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return biometricDataLocalService.deleteBiometricData((BiometricData)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return biometricDataPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the biometric datas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link IdentificationDatabase.model.impl.BiometricDataModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of biometric datas
	 * @param end the upper bound of the range of biometric datas (not inclusive)
	 * @return the range of biometric datas
	 */
	@Override
	public List<BiometricData> getBiometricDatas(int start, int end) {
		return biometricDataPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of biometric datas.
	 *
	 * @return the number of biometric datas
	 */
	@Override
	public int getBiometricDatasCount() {
		return biometricDataPersistence.countAll();
	}

	/**
	 * Updates the biometric data in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param biometricData the biometric data
	 * @return the biometric data that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BiometricData updateBiometricData(BiometricData biometricData) {
		return biometricDataPersistence.update(biometricData);
	}

	@Override
	public BiometricDataFingerPrintBlobModel getFingerPrintBlobModel(
		Serializable primaryKey) {
		Session session = null;

		try {
			session = biometricDataPersistence.openSession();

			return (BiometricDataFingerPrintBlobModel)session.get(BiometricDataFingerPrintBlobModel.class,
				primaryKey);
		}
		catch (Exception e) {
			throw biometricDataPersistence.processException(e);
		}
		finally {
			biometricDataPersistence.closeSession(session);
		}
	}

	/**
	 * Returns the address lookup local service.
	 *
	 * @return the address lookup local service
	 */
	public IdentificationDatabase.service.AddressLookupLocalService getAddressLookupLocalService() {
		return addressLookupLocalService;
	}

	/**
	 * Sets the address lookup local service.
	 *
	 * @param addressLookupLocalService the address lookup local service
	 */
	public void setAddressLookupLocalService(
		IdentificationDatabase.service.AddressLookupLocalService addressLookupLocalService) {
		this.addressLookupLocalService = addressLookupLocalService;
	}

	/**
	 * Returns the address lookup persistence.
	 *
	 * @return the address lookup persistence
	 */
	public AddressLookupPersistence getAddressLookupPersistence() {
		return addressLookupPersistence;
	}

	/**
	 * Sets the address lookup persistence.
	 *
	 * @param addressLookupPersistence the address lookup persistence
	 */
	public void setAddressLookupPersistence(
		AddressLookupPersistence addressLookupPersistence) {
		this.addressLookupPersistence = addressLookupPersistence;
	}

	/**
	 * Returns the biometric data local service.
	 *
	 * @return the biometric data local service
	 */
	public BiometricDataLocalService getBiometricDataLocalService() {
		return biometricDataLocalService;
	}

	/**
	 * Sets the biometric data local service.
	 *
	 * @param biometricDataLocalService the biometric data local service
	 */
	public void setBiometricDataLocalService(
		BiometricDataLocalService biometricDataLocalService) {
		this.biometricDataLocalService = biometricDataLocalService;
	}

	/**
	 * Returns the biometric data persistence.
	 *
	 * @return the biometric data persistence
	 */
	public BiometricDataPersistence getBiometricDataPersistence() {
		return biometricDataPersistence;
	}

	/**
	 * Sets the biometric data persistence.
	 *
	 * @param biometricDataPersistence the biometric data persistence
	 */
	public void setBiometricDataPersistence(
		BiometricDataPersistence biometricDataPersistence) {
		this.biometricDataPersistence = biometricDataPersistence;
	}

	/**
	 * Returns the citizen fingerprint matcher local service.
	 *
	 * @return the citizen fingerprint matcher local service
	 */
	public IdentificationDatabase.service.CitizenFingerprintMatcherLocalService getCitizenFingerprintMatcherLocalService() {
		return citizenFingerprintMatcherLocalService;
	}

	/**
	 * Sets the citizen fingerprint matcher local service.
	 *
	 * @param citizenFingerprintMatcherLocalService the citizen fingerprint matcher local service
	 */
	public void setCitizenFingerprintMatcherLocalService(
		IdentificationDatabase.service.CitizenFingerprintMatcherLocalService citizenFingerprintMatcherLocalService) {
		this.citizenFingerprintMatcherLocalService = citizenFingerprintMatcherLocalService;
	}

	/**
	 * Returns the citizen fingerprint matcher persistence.
	 *
	 * @return the citizen fingerprint matcher persistence
	 */
	public CitizenFingerprintMatcherPersistence getCitizenFingerprintMatcherPersistence() {
		return citizenFingerprintMatcherPersistence;
	}

	/**
	 * Sets the citizen fingerprint matcher persistence.
	 *
	 * @param citizenFingerprintMatcherPersistence the citizen fingerprint matcher persistence
	 */
	public void setCitizenFingerprintMatcherPersistence(
		CitizenFingerprintMatcherPersistence citizenFingerprintMatcherPersistence) {
		this.citizenFingerprintMatcherPersistence = citizenFingerprintMatcherPersistence;
	}

	/**
	 * Returns the citizen remark local service.
	 *
	 * @return the citizen remark local service
	 */
	public IdentificationDatabase.service.CitizenRemarkLocalService getCitizenRemarkLocalService() {
		return citizenRemarkLocalService;
	}

	/**
	 * Sets the citizen remark local service.
	 *
	 * @param citizenRemarkLocalService the citizen remark local service
	 */
	public void setCitizenRemarkLocalService(
		IdentificationDatabase.service.CitizenRemarkLocalService citizenRemarkLocalService) {
		this.citizenRemarkLocalService = citizenRemarkLocalService;
	}

	/**
	 * Returns the citizen remark persistence.
	 *
	 * @return the citizen remark persistence
	 */
	public CitizenRemarkPersistence getCitizenRemarkPersistence() {
		return citizenRemarkPersistence;
	}

	/**
	 * Sets the citizen remark persistence.
	 *
	 * @param citizenRemarkPersistence the citizen remark persistence
	 */
	public void setCitizenRemarkPersistence(
		CitizenRemarkPersistence citizenRemarkPersistence) {
		this.citizenRemarkPersistence = citizenRemarkPersistence;
	}

	/**
	 * Returns the kebeles local service.
	 *
	 * @return the kebeles local service
	 */
	public IdentificationDatabase.service.KebelesLocalService getKebelesLocalService() {
		return kebelesLocalService;
	}

	/**
	 * Sets the kebeles local service.
	 *
	 * @param kebelesLocalService the kebeles local service
	 */
	public void setKebelesLocalService(
		IdentificationDatabase.service.KebelesLocalService kebelesLocalService) {
		this.kebelesLocalService = kebelesLocalService;
	}

	/**
	 * Returns the kebeles persistence.
	 *
	 * @return the kebeles persistence
	 */
	public KebelesPersistence getKebelesPersistence() {
		return kebelesPersistence;
	}

	/**
	 * Sets the kebeles persistence.
	 *
	 * @param kebelesPersistence the kebeles persistence
	 */
	public void setKebelesPersistence(KebelesPersistence kebelesPersistence) {
		this.kebelesPersistence = kebelesPersistence;
	}

	/**
	 * Returns the printed history local service.
	 *
	 * @return the printed history local service
	 */
	public IdentificationDatabase.service.PrintedHistoryLocalService getPrintedHistoryLocalService() {
		return printedHistoryLocalService;
	}

	/**
	 * Sets the printed history local service.
	 *
	 * @param printedHistoryLocalService the printed history local service
	 */
	public void setPrintedHistoryLocalService(
		IdentificationDatabase.service.PrintedHistoryLocalService printedHistoryLocalService) {
		this.printedHistoryLocalService = printedHistoryLocalService;
	}

	/**
	 * Returns the printed history persistence.
	 *
	 * @return the printed history persistence
	 */
	public PrintedHistoryPersistence getPrintedHistoryPersistence() {
		return printedHistoryPersistence;
	}

	/**
	 * Sets the printed history persistence.
	 *
	 * @param printedHistoryPersistence the printed history persistence
	 */
	public void setPrintedHistoryPersistence(
		PrintedHistoryPersistence printedHistoryPersistence) {
		this.printedHistoryPersistence = printedHistoryPersistence;
	}

	/**
	 * Returns the registration citizen local service.
	 *
	 * @return the registration citizen local service
	 */
	public IdentificationDatabase.service.RegistrationCitizenLocalService getRegistrationCitizenLocalService() {
		return registrationCitizenLocalService;
	}

	/**
	 * Sets the registration citizen local service.
	 *
	 * @param registrationCitizenLocalService the registration citizen local service
	 */
	public void setRegistrationCitizenLocalService(
		IdentificationDatabase.service.RegistrationCitizenLocalService registrationCitizenLocalService) {
		this.registrationCitizenLocalService = registrationCitizenLocalService;
	}

	/**
	 * Returns the registration citizen persistence.
	 *
	 * @return the registration citizen persistence
	 */
	public RegistrationCitizenPersistence getRegistrationCitizenPersistence() {
		return registrationCitizenPersistence;
	}

	/**
	 * Sets the registration citizen persistence.
	 *
	 * @param registrationCitizenPersistence the registration citizen persistence
	 */
	public void setRegistrationCitizenPersistence(
		RegistrationCitizenPersistence registrationCitizenPersistence) {
		this.registrationCitizenPersistence = registrationCitizenPersistence;
	}

	/**
	 * Returns the services local service.
	 *
	 * @return the services local service
	 */
	public IdentificationDatabase.service.ServicesLocalService getServicesLocalService() {
		return servicesLocalService;
	}

	/**
	 * Sets the services local service.
	 *
	 * @param servicesLocalService the services local service
	 */
	public void setServicesLocalService(
		IdentificationDatabase.service.ServicesLocalService servicesLocalService) {
		this.servicesLocalService = servicesLocalService;
	}

	/**
	 * Returns the services persistence.
	 *
	 * @return the services persistence
	 */
	public ServicesPersistence getServicesPersistence() {
		return servicesPersistence;
	}

	/**
	 * Sets the services persistence.
	 *
	 * @param servicesPersistence the services persistence
	 */
	public void setServicesPersistence(ServicesPersistence servicesPersistence) {
		this.servicesPersistence = servicesPersistence;
	}

	/**
	 * Returns the settings local service.
	 *
	 * @return the settings local service
	 */
	public IdentificationDatabase.service.SettingsLocalService getSettingsLocalService() {
		return settingsLocalService;
	}

	/**
	 * Sets the settings local service.
	 *
	 * @param settingsLocalService the settings local service
	 */
	public void setSettingsLocalService(
		IdentificationDatabase.service.SettingsLocalService settingsLocalService) {
		this.settingsLocalService = settingsLocalService;
	}

	/**
	 * Returns the settings persistence.
	 *
	 * @return the settings persistence
	 */
	public SettingsPersistence getSettingsPersistence() {
		return settingsPersistence;
	}

	/**
	 * Sets the settings persistence.
	 *
	 * @param settingsPersistence the settings persistence
	 */
	public void setSettingsPersistence(SettingsPersistence settingsPersistence) {
		this.settingsPersistence = settingsPersistence;
	}

	/**
	 * Returns the transfer to other city local service.
	 *
	 * @return the transfer to other city local service
	 */
	public IdentificationDatabase.service.TransferToOtherCityLocalService getTransferToOtherCityLocalService() {
		return transferToOtherCityLocalService;
	}

	/**
	 * Sets the transfer to other city local service.
	 *
	 * @param transferToOtherCityLocalService the transfer to other city local service
	 */
	public void setTransferToOtherCityLocalService(
		IdentificationDatabase.service.TransferToOtherCityLocalService transferToOtherCityLocalService) {
		this.transferToOtherCityLocalService = transferToOtherCityLocalService;
	}

	/**
	 * Returns the transfer to other city persistence.
	 *
	 * @return the transfer to other city persistence
	 */
	public TransferToOtherCityPersistence getTransferToOtherCityPersistence() {
		return transferToOtherCityPersistence;
	}

	/**
	 * Sets the transfer to other city persistence.
	 *
	 * @param transferToOtherCityPersistence the transfer to other city persistence
	 */
	public void setTransferToOtherCityPersistence(
		TransferToOtherCityPersistence transferToOtherCityPersistence) {
		this.transferToOtherCityPersistence = transferToOtherCityPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("IdentificationDatabase.model.BiometricData",
			biometricDataLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"IdentificationDatabase.model.BiometricData");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return BiometricDataLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return BiometricData.class;
	}

	protected String getModelClassName() {
		return BiometricData.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = biometricDataPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = IdentificationDatabase.service.AddressLookupLocalService.class)
	protected IdentificationDatabase.service.AddressLookupLocalService addressLookupLocalService;
	@BeanReference(type = AddressLookupPersistence.class)
	protected AddressLookupPersistence addressLookupPersistence;
	@BeanReference(type = BiometricDataLocalService.class)
	protected BiometricDataLocalService biometricDataLocalService;
	@BeanReference(type = BiometricDataPersistence.class)
	protected BiometricDataPersistence biometricDataPersistence;
	@BeanReference(type = IdentificationDatabase.service.CitizenFingerprintMatcherLocalService.class)
	protected IdentificationDatabase.service.CitizenFingerprintMatcherLocalService citizenFingerprintMatcherLocalService;
	@BeanReference(type = CitizenFingerprintMatcherPersistence.class)
	protected CitizenFingerprintMatcherPersistence citizenFingerprintMatcherPersistence;
	@BeanReference(type = IdentificationDatabase.service.CitizenRemarkLocalService.class)
	protected IdentificationDatabase.service.CitizenRemarkLocalService citizenRemarkLocalService;
	@BeanReference(type = CitizenRemarkPersistence.class)
	protected CitizenRemarkPersistence citizenRemarkPersistence;
	@BeanReference(type = IdentificationDatabase.service.KebelesLocalService.class)
	protected IdentificationDatabase.service.KebelesLocalService kebelesLocalService;
	@BeanReference(type = KebelesPersistence.class)
	protected KebelesPersistence kebelesPersistence;
	@BeanReference(type = IdentificationDatabase.service.PrintedHistoryLocalService.class)
	protected IdentificationDatabase.service.PrintedHistoryLocalService printedHistoryLocalService;
	@BeanReference(type = PrintedHistoryPersistence.class)
	protected PrintedHistoryPersistence printedHistoryPersistence;
	@BeanReference(type = IdentificationDatabase.service.RegistrationCitizenLocalService.class)
	protected IdentificationDatabase.service.RegistrationCitizenLocalService registrationCitizenLocalService;
	@BeanReference(type = RegistrationCitizenPersistence.class)
	protected RegistrationCitizenPersistence registrationCitizenPersistence;
	@BeanReference(type = IdentificationDatabase.service.ServicesLocalService.class)
	protected IdentificationDatabase.service.ServicesLocalService servicesLocalService;
	@BeanReference(type = ServicesPersistence.class)
	protected ServicesPersistence servicesPersistence;
	@BeanReference(type = IdentificationDatabase.service.SettingsLocalService.class)
	protected IdentificationDatabase.service.SettingsLocalService settingsLocalService;
	@BeanReference(type = SettingsPersistence.class)
	protected SettingsPersistence settingsPersistence;
	@BeanReference(type = IdentificationDatabase.service.TransferToOtherCityLocalService.class)
	protected IdentificationDatabase.service.TransferToOtherCityLocalService transferToOtherCityLocalService;
	@BeanReference(type = TransferToOtherCityPersistence.class)
	protected TransferToOtherCityPersistence transferToOtherCityPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}