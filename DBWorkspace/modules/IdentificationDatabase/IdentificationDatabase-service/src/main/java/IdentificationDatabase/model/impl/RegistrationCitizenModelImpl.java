/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package IdentificationDatabase.model.impl;

import IdentificationDatabase.model.RegistrationCitizen;
import IdentificationDatabase.model.RegistrationCitizenModel;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RegistrationCitizen service. Represents a row in the &quot;ID_RegistrationCitizen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RegistrationCitizenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationCitizenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegistrationCitizenImpl
 * @see RegistrationCitizen
 * @see RegistrationCitizenModel
 * @generated
 */
@ProviderType
public class RegistrationCitizenModelImpl extends BaseModelImpl<RegistrationCitizen>
	implements RegistrationCitizenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registration citizen model instance should use the {@link RegistrationCitizen} interface instead.
	 */
	public static final String TABLE_NAME = "ID_RegistrationCitizen";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "code_", Types.VARCHAR },
			{ "owner", Types.BOOLEAN },
			{ "city", Types.VARCHAR },
			{ "subCity", Types.VARCHAR },
			{ "kebele", Types.VARCHAR },
			{ "houseNo", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "fatherName", Types.VARCHAR },
			{ "grandfatherName", Types.VARCHAR },
			{ "motherName", Types.VARCHAR },
			{ "citizenship", Types.VARCHAR },
			{ "nation", Types.VARCHAR },
			{ "birthDate", Types.TIMESTAMP },
			{ "birthPlace", Types.VARCHAR },
			{ "sex", Types.VARCHAR },
			{ "occupation", Types.VARCHAR },
			{ "telephone", Types.VARCHAR },
			{ "relation", Types.VARCHAR },
			{ "idType", Types.VARCHAR },
			{ "issueDate", Types.TIMESTAMP },
			{ "expireDate", Types.TIMESTAMP },
			{ "emergencyContactName", Types.VARCHAR },
			{ "emergencyContacPhone", Types.VARCHAR },
			{ "image", Types.VARCHAR },
			{ "signature", Types.VARCHAR },
			{ "fingerprint", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "reciptNo", Types.VARCHAR },
			{ "notice", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("owner", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kebele", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("houseNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grandfatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("citizenship", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("birthPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sex", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("relation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("emergencyContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emergencyContacPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fingerprint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reciptNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notice", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ID_RegistrationCitizen (id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,code_ VARCHAR(75) null,owner BOOLEAN,city VARCHAR(75) null,subCity VARCHAR(75) null,kebele VARCHAR(75) null,houseNo VARCHAR(75) null,name VARCHAR(75) null,fatherName VARCHAR(75) null,grandfatherName VARCHAR(75) null,motherName VARCHAR(75) null,citizenship VARCHAR(75) null,nation VARCHAR(75) null,birthDate DATE null,birthPlace VARCHAR(75) null,sex VARCHAR(75) null,occupation VARCHAR(75) null,telephone VARCHAR(75) null,relation VARCHAR(75) null,idType VARCHAR(75) null,issueDate DATE null,expireDate DATE null,emergencyContactName VARCHAR(75) null,emergencyContacPhone VARCHAR(75) null,image VARCHAR(75) null,signature VARCHAR(75) null,fingerprint VARCHAR(75) null,status INTEGER,reciptNo VARCHAR(75) null,notice VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ID_RegistrationCitizen";
	public static final String ORDER_BY_JPQL = " ORDER BY registrationCitizen.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ID_RegistrationCitizen.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(IdentificationDatabase.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.IdentificationDatabase.model.RegistrationCitizen"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(IdentificationDatabase.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.IdentificationDatabase.model.RegistrationCitizen"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(IdentificationDatabase.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.IdentificationDatabase.model.RegistrationCitizen"),
			true);
	public static final long CODE_COLUMN_BITMASK = 1L;
	public static final long HOUSENO_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;
	public static final long ISSUEDATE_COLUMN_BITMASK = 8L;
	public static final long KEBELE_COLUMN_BITMASK = 16L;
	public static final long OCCUPATION_COLUMN_BITMASK = 32L;
	public static final long RECIPTNO_COLUMN_BITMASK = 64L;
	public static final long SEX_COLUMN_BITMASK = 128L;
	public static final long STATUS_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(IdentificationDatabase.service.util.ServiceProps.get(
				"lock.expiration.time.IdentificationDatabase.model.RegistrationCitizen"));

	public RegistrationCitizenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegistrationCitizen.class;
	}

	@Override
	public String getModelClassName() {
		return RegistrationCitizen.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("code", getCode());
		attributes.put("owner", getOwner());
		attributes.put("city", getCity());
		attributes.put("subCity", getSubCity());
		attributes.put("kebele", getKebele());
		attributes.put("houseNo", getHouseNo());
		attributes.put("name", getName());
		attributes.put("fatherName", getFatherName());
		attributes.put("grandfatherName", getGrandfatherName());
		attributes.put("motherName", getMotherName());
		attributes.put("citizenship", getCitizenship());
		attributes.put("nation", getNation());
		attributes.put("birthDate", getBirthDate());
		attributes.put("birthPlace", getBirthPlace());
		attributes.put("sex", getSex());
		attributes.put("occupation", getOccupation());
		attributes.put("telephone", getTelephone());
		attributes.put("relation", getRelation());
		attributes.put("idType", getIdType());
		attributes.put("issueDate", getIssueDate());
		attributes.put("expireDate", getExpireDate());
		attributes.put("emergencyContactName", getEmergencyContactName());
		attributes.put("emergencyContacPhone", getEmergencyContacPhone());
		attributes.put("image", getImage());
		attributes.put("signature", getSignature());
		attributes.put("fingerprint", getFingerprint());
		attributes.put("status", getStatus());
		attributes.put("reciptNo", getReciptNo());
		attributes.put("notice", getNotice());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Boolean owner = (Boolean)attributes.get("owner");

		if (owner != null) {
			setOwner(owner);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String subCity = (String)attributes.get("subCity");

		if (subCity != null) {
			setSubCity(subCity);
		}

		String kebele = (String)attributes.get("kebele");

		if (kebele != null) {
			setKebele(kebele);
		}

		String houseNo = (String)attributes.get("houseNo");

		if (houseNo != null) {
			setHouseNo(houseNo);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String fatherName = (String)attributes.get("fatherName");

		if (fatherName != null) {
			setFatherName(fatherName);
		}

		String grandfatherName = (String)attributes.get("grandfatherName");

		if (grandfatherName != null) {
			setGrandfatherName(grandfatherName);
		}

		String motherName = (String)attributes.get("motherName");

		if (motherName != null) {
			setMotherName(motherName);
		}

		String citizenship = (String)attributes.get("citizenship");

		if (citizenship != null) {
			setCitizenship(citizenship);
		}

		String nation = (String)attributes.get("nation");

		if (nation != null) {
			setNation(nation);
		}

		Date birthDate = (Date)attributes.get("birthDate");

		if (birthDate != null) {
			setBirthDate(birthDate);
		}

		String birthPlace = (String)attributes.get("birthPlace");

		if (birthPlace != null) {
			setBirthPlace(birthPlace);
		}

		String sex = (String)attributes.get("sex");

		if (sex != null) {
			setSex(sex);
		}

		String occupation = (String)attributes.get("occupation");

		if (occupation != null) {
			setOccupation(occupation);
		}

		String telephone = (String)attributes.get("telephone");

		if (telephone != null) {
			setTelephone(telephone);
		}

		String relation = (String)attributes.get("relation");

		if (relation != null) {
			setRelation(relation);
		}

		String idType = (String)attributes.get("idType");

		if (idType != null) {
			setIdType(idType);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		Date expireDate = (Date)attributes.get("expireDate");

		if (expireDate != null) {
			setExpireDate(expireDate);
		}

		String emergencyContactName = (String)attributes.get(
				"emergencyContactName");

		if (emergencyContactName != null) {
			setEmergencyContactName(emergencyContactName);
		}

		String emergencyContacPhone = (String)attributes.get(
				"emergencyContacPhone");

		if (emergencyContacPhone != null) {
			setEmergencyContacPhone(emergencyContacPhone);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		String signature = (String)attributes.get("signature");

		if (signature != null) {
			setSignature(signature);
		}

		String fingerprint = (String)attributes.get("fingerprint");

		if (fingerprint != null) {
			setFingerprint(fingerprint);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String reciptNo = (String)attributes.get("reciptNo");

		if (reciptNo != null) {
			setReciptNo(reciptNo);
		}

		String notice = (String)attributes.get("notice");

		if (notice != null) {
			setNotice(notice);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public boolean getOwner() {
		return _owner;
	}

	@Override
	public boolean isOwner() {
		return _owner;
	}

	@Override
	public void setOwner(boolean owner) {
		_owner = owner;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getSubCity() {
		if (_subCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _subCity;
		}
	}

	@Override
	public void setSubCity(String subCity) {
		_subCity = subCity;
	}

	@Override
	public String getKebele() {
		if (_kebele == null) {
			return StringPool.BLANK;
		}
		else {
			return _kebele;
		}
	}

	@Override
	public void setKebele(String kebele) {
		_columnBitmask |= KEBELE_COLUMN_BITMASK;

		if (_originalKebele == null) {
			_originalKebele = _kebele;
		}

		_kebele = kebele;
	}

	public String getOriginalKebele() {
		return GetterUtil.getString(_originalKebele);
	}

	@Override
	public String getHouseNo() {
		if (_houseNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _houseNo;
		}
	}

	@Override
	public void setHouseNo(String houseNo) {
		_columnBitmask |= HOUSENO_COLUMN_BITMASK;

		if (_originalHouseNo == null) {
			_originalHouseNo = _houseNo;
		}

		_houseNo = houseNo;
	}

	public String getOriginalHouseNo() {
		return GetterUtil.getString(_originalHouseNo);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		_fatherName = fatherName;
	}

	@Override
	public String getGrandfatherName() {
		if (_grandfatherName == null) {
			return StringPool.BLANK;
		}
		else {
			return _grandfatherName;
		}
	}

	@Override
	public void setGrandfatherName(String grandfatherName) {
		_grandfatherName = grandfatherName;
	}

	@Override
	public String getMotherName() {
		if (_motherName == null) {
			return StringPool.BLANK;
		}
		else {
			return _motherName;
		}
	}

	@Override
	public void setMotherName(String motherName) {
		_motherName = motherName;
	}

	@Override
	public String getCitizenship() {
		if (_citizenship == null) {
			return StringPool.BLANK;
		}
		else {
			return _citizenship;
		}
	}

	@Override
	public void setCitizenship(String citizenship) {
		_citizenship = citizenship;
	}

	@Override
	public String getNation() {
		if (_nation == null) {
			return StringPool.BLANK;
		}
		else {
			return _nation;
		}
	}

	@Override
	public void setNation(String nation) {
		_nation = nation;
	}

	@Override
	public Date getBirthDate() {
		return _birthDate;
	}

	@Override
	public void setBirthDate(Date birthDate) {
		_birthDate = birthDate;
	}

	@Override
	public String getBirthPlace() {
		if (_birthPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _birthPlace;
		}
	}

	@Override
	public void setBirthPlace(String birthPlace) {
		_birthPlace = birthPlace;
	}

	@Override
	public String getSex() {
		if (_sex == null) {
			return StringPool.BLANK;
		}
		else {
			return _sex;
		}
	}

	@Override
	public void setSex(String sex) {
		_columnBitmask |= SEX_COLUMN_BITMASK;

		if (_originalSex == null) {
			_originalSex = _sex;
		}

		_sex = sex;
	}

	public String getOriginalSex() {
		return GetterUtil.getString(_originalSex);
	}

	@Override
	public String getOccupation() {
		if (_occupation == null) {
			return StringPool.BLANK;
		}
		else {
			return _occupation;
		}
	}

	@Override
	public void setOccupation(String occupation) {
		_columnBitmask |= OCCUPATION_COLUMN_BITMASK;

		if (_originalOccupation == null) {
			_originalOccupation = _occupation;
		}

		_occupation = occupation;
	}

	public String getOriginalOccupation() {
		return GetterUtil.getString(_originalOccupation);
	}

	@Override
	public String getTelephone() {
		if (_telephone == null) {
			return StringPool.BLANK;
		}
		else {
			return _telephone;
		}
	}

	@Override
	public void setTelephone(String telephone) {
		_telephone = telephone;
	}

	@Override
	public String getRelation() {
		if (_relation == null) {
			return StringPool.BLANK;
		}
		else {
			return _relation;
		}
	}

	@Override
	public void setRelation(String relation) {
		_relation = relation;
	}

	@Override
	public String getIdType() {
		if (_idType == null) {
			return StringPool.BLANK;
		}
		else {
			return _idType;
		}
	}

	@Override
	public void setIdType(String idType) {
		_idType = idType;
	}

	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_columnBitmask |= ISSUEDATE_COLUMN_BITMASK;

		if (_originalIssueDate == null) {
			_originalIssueDate = _issueDate;
		}

		_issueDate = issueDate;
	}

	public Date getOriginalIssueDate() {
		return _originalIssueDate;
	}

	@Override
	public Date getExpireDate() {
		return _expireDate;
	}

	@Override
	public void setExpireDate(Date expireDate) {
		_expireDate = expireDate;
	}

	@Override
	public String getEmergencyContactName() {
		if (_emergencyContactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _emergencyContactName;
		}
	}

	@Override
	public void setEmergencyContactName(String emergencyContactName) {
		_emergencyContactName = emergencyContactName;
	}

	@Override
	public String getEmergencyContacPhone() {
		if (_emergencyContacPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _emergencyContacPhone;
		}
	}

	@Override
	public void setEmergencyContacPhone(String emergencyContacPhone) {
		_emergencyContacPhone = emergencyContacPhone;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public String getSignature() {
		if (_signature == null) {
			return StringPool.BLANK;
		}
		else {
			return _signature;
		}
	}

	@Override
	public void setSignature(String signature) {
		_signature = signature;
	}

	@Override
	public String getFingerprint() {
		if (_fingerprint == null) {
			return StringPool.BLANK;
		}
		else {
			return _fingerprint;
		}
	}

	@Override
	public void setFingerprint(String fingerprint) {
		_fingerprint = fingerprint;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public String getReciptNo() {
		if (_reciptNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _reciptNo;
		}
	}

	@Override
	public void setReciptNo(String reciptNo) {
		_columnBitmask |= RECIPTNO_COLUMN_BITMASK;

		if (_originalReciptNo == null) {
			_originalReciptNo = _reciptNo;
		}

		_reciptNo = reciptNo;
	}

	public String getOriginalReciptNo() {
		return GetterUtil.getString(_originalReciptNo);
	}

	@Override
	public String getNotice() {
		if (_notice == null) {
			return StringPool.BLANK;
		}
		else {
			return _notice;
		}
	}

	@Override
	public void setNotice(String notice) {
		_notice = notice;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RegistrationCitizen.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegistrationCitizen toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegistrationCitizen)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegistrationCitizenImpl registrationCitizenImpl = new RegistrationCitizenImpl();

		registrationCitizenImpl.setId(getId());
		registrationCitizenImpl.setGroupId(getGroupId());
		registrationCitizenImpl.setCompanyId(getCompanyId());
		registrationCitizenImpl.setUserId(getUserId());
		registrationCitizenImpl.setUserName(getUserName());
		registrationCitizenImpl.setCreateDate(getCreateDate());
		registrationCitizenImpl.setModifiedDate(getModifiedDate());
		registrationCitizenImpl.setCode(getCode());
		registrationCitizenImpl.setOwner(getOwner());
		registrationCitizenImpl.setCity(getCity());
		registrationCitizenImpl.setSubCity(getSubCity());
		registrationCitizenImpl.setKebele(getKebele());
		registrationCitizenImpl.setHouseNo(getHouseNo());
		registrationCitizenImpl.setName(getName());
		registrationCitizenImpl.setFatherName(getFatherName());
		registrationCitizenImpl.setGrandfatherName(getGrandfatherName());
		registrationCitizenImpl.setMotherName(getMotherName());
		registrationCitizenImpl.setCitizenship(getCitizenship());
		registrationCitizenImpl.setNation(getNation());
		registrationCitizenImpl.setBirthDate(getBirthDate());
		registrationCitizenImpl.setBirthPlace(getBirthPlace());
		registrationCitizenImpl.setSex(getSex());
		registrationCitizenImpl.setOccupation(getOccupation());
		registrationCitizenImpl.setTelephone(getTelephone());
		registrationCitizenImpl.setRelation(getRelation());
		registrationCitizenImpl.setIdType(getIdType());
		registrationCitizenImpl.setIssueDate(getIssueDate());
		registrationCitizenImpl.setExpireDate(getExpireDate());
		registrationCitizenImpl.setEmergencyContactName(getEmergencyContactName());
		registrationCitizenImpl.setEmergencyContacPhone(getEmergencyContacPhone());
		registrationCitizenImpl.setImage(getImage());
		registrationCitizenImpl.setSignature(getSignature());
		registrationCitizenImpl.setFingerprint(getFingerprint());
		registrationCitizenImpl.setStatus(getStatus());
		registrationCitizenImpl.setReciptNo(getReciptNo());
		registrationCitizenImpl.setNotice(getNotice());

		registrationCitizenImpl.resetOriginalValues();

		return registrationCitizenImpl;
	}

	@Override
	public int compareTo(RegistrationCitizen registrationCitizen) {
		int value = 0;

		if (getId() < registrationCitizen.getId()) {
			value = -1;
		}
		else if (getId() > registrationCitizen.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegistrationCitizen)) {
			return false;
		}

		RegistrationCitizen registrationCitizen = (RegistrationCitizen)obj;

		long primaryKey = registrationCitizen.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RegistrationCitizenModelImpl registrationCitizenModelImpl = this;

		registrationCitizenModelImpl._originalId = registrationCitizenModelImpl._id;

		registrationCitizenModelImpl._setOriginalId = false;

		registrationCitizenModelImpl._setModifiedDate = false;

		registrationCitizenModelImpl._originalCode = registrationCitizenModelImpl._code;

		registrationCitizenModelImpl._originalKebele = registrationCitizenModelImpl._kebele;

		registrationCitizenModelImpl._originalHouseNo = registrationCitizenModelImpl._houseNo;

		registrationCitizenModelImpl._originalSex = registrationCitizenModelImpl._sex;

		registrationCitizenModelImpl._originalOccupation = registrationCitizenModelImpl._occupation;

		registrationCitizenModelImpl._originalIssueDate = registrationCitizenModelImpl._issueDate;

		registrationCitizenModelImpl._originalStatus = registrationCitizenModelImpl._status;

		registrationCitizenModelImpl._setOriginalStatus = false;

		registrationCitizenModelImpl._originalReciptNo = registrationCitizenModelImpl._reciptNo;

		registrationCitizenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegistrationCitizen> toCacheModel() {
		RegistrationCitizenCacheModel registrationCitizenCacheModel = new RegistrationCitizenCacheModel();

		registrationCitizenCacheModel.id = getId();

		registrationCitizenCacheModel.groupId = getGroupId();

		registrationCitizenCacheModel.companyId = getCompanyId();

		registrationCitizenCacheModel.userId = getUserId();

		registrationCitizenCacheModel.userName = getUserName();

		String userName = registrationCitizenCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registrationCitizenCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registrationCitizenCacheModel.createDate = createDate.getTime();
		}
		else {
			registrationCitizenCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registrationCitizenCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registrationCitizenCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		registrationCitizenCacheModel.code = getCode();

		String code = registrationCitizenCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			registrationCitizenCacheModel.code = null;
		}

		registrationCitizenCacheModel.owner = getOwner();

		registrationCitizenCacheModel.city = getCity();

		String city = registrationCitizenCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			registrationCitizenCacheModel.city = null;
		}

		registrationCitizenCacheModel.subCity = getSubCity();

		String subCity = registrationCitizenCacheModel.subCity;

		if ((subCity != null) && (subCity.length() == 0)) {
			registrationCitizenCacheModel.subCity = null;
		}

		registrationCitizenCacheModel.kebele = getKebele();

		String kebele = registrationCitizenCacheModel.kebele;

		if ((kebele != null) && (kebele.length() == 0)) {
			registrationCitizenCacheModel.kebele = null;
		}

		registrationCitizenCacheModel.houseNo = getHouseNo();

		String houseNo = registrationCitizenCacheModel.houseNo;

		if ((houseNo != null) && (houseNo.length() == 0)) {
			registrationCitizenCacheModel.houseNo = null;
		}

		registrationCitizenCacheModel.name = getName();

		String name = registrationCitizenCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			registrationCitizenCacheModel.name = null;
		}

		registrationCitizenCacheModel.fatherName = getFatherName();

		String fatherName = registrationCitizenCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			registrationCitizenCacheModel.fatherName = null;
		}

		registrationCitizenCacheModel.grandfatherName = getGrandfatherName();

		String grandfatherName = registrationCitizenCacheModel.grandfatherName;

		if ((grandfatherName != null) && (grandfatherName.length() == 0)) {
			registrationCitizenCacheModel.grandfatherName = null;
		}

		registrationCitizenCacheModel.motherName = getMotherName();

		String motherName = registrationCitizenCacheModel.motherName;

		if ((motherName != null) && (motherName.length() == 0)) {
			registrationCitizenCacheModel.motherName = null;
		}

		registrationCitizenCacheModel.citizenship = getCitizenship();

		String citizenship = registrationCitizenCacheModel.citizenship;

		if ((citizenship != null) && (citizenship.length() == 0)) {
			registrationCitizenCacheModel.citizenship = null;
		}

		registrationCitizenCacheModel.nation = getNation();

		String nation = registrationCitizenCacheModel.nation;

		if ((nation != null) && (nation.length() == 0)) {
			registrationCitizenCacheModel.nation = null;
		}

		Date birthDate = getBirthDate();

		if (birthDate != null) {
			registrationCitizenCacheModel.birthDate = birthDate.getTime();
		}
		else {
			registrationCitizenCacheModel.birthDate = Long.MIN_VALUE;
		}

		registrationCitizenCacheModel.birthPlace = getBirthPlace();

		String birthPlace = registrationCitizenCacheModel.birthPlace;

		if ((birthPlace != null) && (birthPlace.length() == 0)) {
			registrationCitizenCacheModel.birthPlace = null;
		}

		registrationCitizenCacheModel.sex = getSex();

		String sex = registrationCitizenCacheModel.sex;

		if ((sex != null) && (sex.length() == 0)) {
			registrationCitizenCacheModel.sex = null;
		}

		registrationCitizenCacheModel.occupation = getOccupation();

		String occupation = registrationCitizenCacheModel.occupation;

		if ((occupation != null) && (occupation.length() == 0)) {
			registrationCitizenCacheModel.occupation = null;
		}

		registrationCitizenCacheModel.telephone = getTelephone();

		String telephone = registrationCitizenCacheModel.telephone;

		if ((telephone != null) && (telephone.length() == 0)) {
			registrationCitizenCacheModel.telephone = null;
		}

		registrationCitizenCacheModel.relation = getRelation();

		String relation = registrationCitizenCacheModel.relation;

		if ((relation != null) && (relation.length() == 0)) {
			registrationCitizenCacheModel.relation = null;
		}

		registrationCitizenCacheModel.idType = getIdType();

		String idType = registrationCitizenCacheModel.idType;

		if ((idType != null) && (idType.length() == 0)) {
			registrationCitizenCacheModel.idType = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			registrationCitizenCacheModel.issueDate = issueDate.getTime();
		}
		else {
			registrationCitizenCacheModel.issueDate = Long.MIN_VALUE;
		}

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			registrationCitizenCacheModel.expireDate = expireDate.getTime();
		}
		else {
			registrationCitizenCacheModel.expireDate = Long.MIN_VALUE;
		}

		registrationCitizenCacheModel.emergencyContactName = getEmergencyContactName();

		String emergencyContactName = registrationCitizenCacheModel.emergencyContactName;

		if ((emergencyContactName != null) &&
				(emergencyContactName.length() == 0)) {
			registrationCitizenCacheModel.emergencyContactName = null;
		}

		registrationCitizenCacheModel.emergencyContacPhone = getEmergencyContacPhone();

		String emergencyContacPhone = registrationCitizenCacheModel.emergencyContacPhone;

		if ((emergencyContacPhone != null) &&
				(emergencyContacPhone.length() == 0)) {
			registrationCitizenCacheModel.emergencyContacPhone = null;
		}

		registrationCitizenCacheModel.image = getImage();

		String image = registrationCitizenCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			registrationCitizenCacheModel.image = null;
		}

		registrationCitizenCacheModel.signature = getSignature();

		String signature = registrationCitizenCacheModel.signature;

		if ((signature != null) && (signature.length() == 0)) {
			registrationCitizenCacheModel.signature = null;
		}

		registrationCitizenCacheModel.fingerprint = getFingerprint();

		String fingerprint = registrationCitizenCacheModel.fingerprint;

		if ((fingerprint != null) && (fingerprint.length() == 0)) {
			registrationCitizenCacheModel.fingerprint = null;
		}

		registrationCitizenCacheModel.status = getStatus();

		registrationCitizenCacheModel.reciptNo = getReciptNo();

		String reciptNo = registrationCitizenCacheModel.reciptNo;

		if ((reciptNo != null) && (reciptNo.length() == 0)) {
			registrationCitizenCacheModel.reciptNo = null;
		}

		registrationCitizenCacheModel.notice = getNotice();

		String notice = registrationCitizenCacheModel.notice;

		if ((notice != null) && (notice.length() == 0)) {
			registrationCitizenCacheModel.notice = null;
		}

		return registrationCitizenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", owner=");
		sb.append(getOwner());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", subCity=");
		sb.append(getSubCity());
		sb.append(", kebele=");
		sb.append(getKebele());
		sb.append(", houseNo=");
		sb.append(getHouseNo());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", fatherName=");
		sb.append(getFatherName());
		sb.append(", grandfatherName=");
		sb.append(getGrandfatherName());
		sb.append(", motherName=");
		sb.append(getMotherName());
		sb.append(", citizenship=");
		sb.append(getCitizenship());
		sb.append(", nation=");
		sb.append(getNation());
		sb.append(", birthDate=");
		sb.append(getBirthDate());
		sb.append(", birthPlace=");
		sb.append(getBirthPlace());
		sb.append(", sex=");
		sb.append(getSex());
		sb.append(", occupation=");
		sb.append(getOccupation());
		sb.append(", telephone=");
		sb.append(getTelephone());
		sb.append(", relation=");
		sb.append(getRelation());
		sb.append(", idType=");
		sb.append(getIdType());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", emergencyContactName=");
		sb.append(getEmergencyContactName());
		sb.append(", emergencyContacPhone=");
		sb.append(getEmergencyContacPhone());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", signature=");
		sb.append(getSignature());
		sb.append(", fingerprint=");
		sb.append(getFingerprint());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", reciptNo=");
		sb.append(getReciptNo());
		sb.append(", notice=");
		sb.append(getNotice());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("IdentificationDatabase.model.RegistrationCitizen");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>owner</column-name><column-value><![CDATA[");
		sb.append(getOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subCity</column-name><column-value><![CDATA[");
		sb.append(getSubCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kebele</column-name><column-value><![CDATA[");
		sb.append(getKebele());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>houseNo</column-name><column-value><![CDATA[");
		sb.append(getHouseNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fatherName</column-name><column-value><![CDATA[");
		sb.append(getFatherName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grandfatherName</column-name><column-value><![CDATA[");
		sb.append(getGrandfatherName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>motherName</column-name><column-value><![CDATA[");
		sb.append(getMotherName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citizenship</column-name><column-value><![CDATA[");
		sb.append(getCitizenship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nation</column-name><column-value><![CDATA[");
		sb.append(getNation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthDate</column-name><column-value><![CDATA[");
		sb.append(getBirthDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthPlace</column-name><column-value><![CDATA[");
		sb.append(getBirthPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sex</column-name><column-value><![CDATA[");
		sb.append(getSex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>occupation</column-name><column-value><![CDATA[");
		sb.append(getOccupation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telephone</column-name><column-value><![CDATA[");
		sb.append(getTelephone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relation</column-name><column-value><![CDATA[");
		sb.append(getRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idType</column-name><column-value><![CDATA[");
		sb.append(getIdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emergencyContactName</column-name><column-value><![CDATA[");
		sb.append(getEmergencyContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emergencyContacPhone</column-name><column-value><![CDATA[");
		sb.append(getEmergencyContacPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signature</column-name><column-value><![CDATA[");
		sb.append(getSignature());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fingerprint</column-name><column-value><![CDATA[");
		sb.append(getFingerprint());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reciptNo</column-name><column-value><![CDATA[");
		sb.append(getReciptNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notice</column-name><column-value><![CDATA[");
		sb.append(getNotice());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RegistrationCitizen.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RegistrationCitizen.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _code;
	private String _originalCode;
	private boolean _owner;
	private String _city;
	private String _subCity;
	private String _kebele;
	private String _originalKebele;
	private String _houseNo;
	private String _originalHouseNo;
	private String _name;
	private String _fatherName;
	private String _grandfatherName;
	private String _motherName;
	private String _citizenship;
	private String _nation;
	private Date _birthDate;
	private String _birthPlace;
	private String _sex;
	private String _originalSex;
	private String _occupation;
	private String _originalOccupation;
	private String _telephone;
	private String _relation;
	private String _idType;
	private Date _issueDate;
	private Date _originalIssueDate;
	private Date _expireDate;
	private String _emergencyContactName;
	private String _emergencyContacPhone;
	private String _image;
	private String _signature;
	private String _fingerprint;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _reciptNo;
	private String _originalReciptNo;
	private String _notice;
	private long _columnBitmask;
	private RegistrationCitizen _escapedModel;
}